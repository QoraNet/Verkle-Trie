// Code generated by MockGen. DO NOT EDIT.
// Source: node_source.go
//
// Generated by this command:
//
//	mockgen -source node_source.go -destination node_source_mocks.go -package geth
//
// Package geth is a generated GoMock package.
package geth

import (
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MocknodeSource is a mock of NodeSource interface.
type MocknodeSource struct {
	ctrl     *gomock.Controller
	recorder *MocknodeSourceMockRecorder
}

// MocknodeSourceMockRecorder is the mock recorder for MocknodeSource.
type MocknodeSourceMockRecorder struct {
	mock *MocknodeSource
}

// NewMocknodeSource creates a new mock instance.
func NewMocknodeSource(ctrl *gomock.Controller) *MocknodeSource {
	mock := &MocknodeSource{ctrl: ctrl}
	mock.recorder = &MocknodeSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknodeSource) EXPECT() *MocknodeSourceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MocknodeSource) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MocknodeSourceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MocknodeSource)(nil).Close))
}

// Flush mocks base method.
func (m *MocknodeSource) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MocknodeSourceMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MocknodeSource)(nil).Flush))
}

// Node mocks base method.
func (m *MocknodeSource) Node(owner common.Hash, path []byte, hash common.Hash) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Node", owner, path, hash)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Node indicates an expected call of Node.
func (mr *MocknodeSourceMockRecorder) Node(owner, path, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Node", reflect.TypeOf((*MocknodeSource)(nil).Node), owner, path, hash)
}

// set mocks base method.
func (m *MocknodeSource) set(path, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "set", path, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// set indicates an expected call of set.
func (mr *MocknodeSourceMockRecorder) set(path, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "set", reflect.TypeOf((*MocknodeSource)(nil).set), path, value)
}
